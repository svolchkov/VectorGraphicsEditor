/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practiceweek5;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Toolkit;
import java.awt.event.MouseWheelEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.AttributedCharacterIterator;
import java.util.logging.Level;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
/**
 *
 * @author sergeyv
 */
public class Graphics2D_ extends javax.swing.JFrame {

    /**
     * Creates new form Graphics2D
     */
    int pX,pY;
    public int brushWidth,brushHeight;
    public int originalWidth, originalHeight;
 
    
    public Graphics2D_() {
        this.setUndecorated(true);
        this.setBackground(new Color(0,0,0,15));
        brushHeight = brushWidth = 30;
        initComponents();
        originalWidth = graphicsPanel1.getWidth(); 
        originalHeight = graphicsPanel1.getHeight();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2 - this.getSize().width/2, dim.height/2-this.getSize().height/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphicsPanel1 = new practiceweek5.GraphicsPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        graphicsPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout graphicsPanel1Layout = new javax.swing.GroupLayout(graphicsPanel1);
        graphicsPanel1.setLayout(graphicsPanel1Layout);
        graphicsPanel1Layout.setHorizontalGroup(
            graphicsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 352, Short.MAX_VALUE)
        );
        graphicsPanel1Layout.setVerticalGroup(
            graphicsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 254, Short.MAX_VALUE)
        );

        jLabel1.setText("Press F1 for help");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(graphicsPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(24, 24, 24))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(graphicsPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(jLabel1))
        );

        jLabel1.getAccessibleContext().setAccessibleName("[Press F1 for help]");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
                           // Get x,y and store them
                pX=evt.getX();
                pY=evt.getY();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
               // Set the location
                // get the current location x-co-ordinate and then get
                // the current drag x co-ordinate, add them and subtract most recent
                // mouse pressed x co-ordinate
                // do same for y co-ordinate
                setLocation(getLocation().x + evt.getX() - pX,getLocation().y + evt.getY() - pY);
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseDragged

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode() == evt.VK_ESCAPE) {
            //exit
            if (graphicsPanel1.ellipses.size() <= 0)
               System.exit(0); 
            int reply = JOptionPane.showConfirmDialog(null, 
                "Save canvas before exit?","EXIT???", 
                JOptionPane.YES_NO_CANCEL_OPTION);
            if (reply == JOptionPane.NO_OPTION){
                    System.exit(0);
            }
            else if (reply == JOptionPane.YES_OPTION){
                saveToGraphicsFile();
                System.exit(0);
            }
            else{
                return;
            }
        }
        else if(evt.getKeyCode() == evt.VK_OPEN_BRACKET){
            // decrease brush size
            brushHeight = brushWidth -= 5;
        }
        else if(evt.getKeyCode() == evt.VK_CLOSE_BRACKET){
            // increase brush size
            brushHeight = brushWidth += 5;
        }
        
        else if(evt.getKeyCode() == evt.VK_X){
            // save to .png file
            String dirName = "";
            String fileName = "";
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "png");
            JFileChooser c = new JFileChooser();
            c.setFileFilter(filter);
            
      // Demonstrate "Save" dialog:
            int rVal = c.showSaveDialog(this);
            if (rVal == JFileChooser.APPROVE_OPTION) {
                fileName = c.getSelectedFile().getName();
                if (!fileName.endsWith(".png"))
                    fileName += ".png";
                dirName = c.getCurrentDirectory().toString();
            }
            if (rVal == JFileChooser.CANCEL_OPTION) {
                //filename.setText("You pressed cancel");
                //dir.setText("");
                return;
            }
           BufferedImage image = new BufferedImage(graphicsPanel1.getWidth(), 
                   graphicsPanel1.getHeight(), BufferedImage.TYPE_INT_ARGB);
            Graphics g = image.getGraphics();
            graphicsPanel1.paint(g);
            try {
                File fullName = new File(dirName, fileName);
                ImageIO.write(image, "png", fullName);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        
        else if(evt.getKeyCode() == evt.VK_BACK_SLASH){
//                //clear canvas
            if (graphicsPanel1.ellipses.size() <= 0)
                return;
             if (JOptionPane.showConfirmDialog(null, 
            "Clear canvas?","CLEAR CANVAS???", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
                graphicsPanel1.ellipses.clear();
                graphicsPanel1.repaint();
                } 
        }
        
        else if(evt.getKeyCode() == evt.VK_C){
            // select colour
            Color selectedColor = 
                    JColorChooser.showDialog(
                     this,
                     "Choose Color",
                     graphicsPanel1.currentColor);
            if (selectedColor != null){
                            graphicsPanel1.setCurrentColor(selectedColor.getRed(),
                                            selectedColor.getGreen(),
                                            selectedColor.getBlue(),
                                            graphicsPanel1.currentColor.getAlpha());
            }
        }
         else if(evt.getKeyCode() == evt.VK_Z){
             // undo
             graphicsPanel1.undo();            
         }   
        else if(evt.getKeyCode() == evt.VK_COMMA){
            // decrease opacity
                graphicsPanel1.setCurrentColor(0f,0f,0f,-0.1f);
        }
        else if(evt.getKeyCode() == evt.VK_PERIOD){
            // increase opacity
                graphicsPanel1.setCurrentColor(0f,0f,0f,0.1f);
        }
        else if(evt.getKeyCode() == evt.VK_Q){
            // increase Red
                graphicsPanel1.setCurrentColor(0.05f,0f,0f,0f);
        }
        else if(evt.getKeyCode() == evt.VK_A){
            // decrease Red
                graphicsPanel1.setCurrentColor(-0.05f,0f,0f,0f);
        }
        else if(evt.getKeyCode() == evt.VK_W){
            // increase Green
                graphicsPanel1.setCurrentColor(0f,0.05f,0f,0f);
        }
        else if(evt.getKeyCode() == evt.VK_S){
            // decrease Green
                graphicsPanel1.setCurrentColor(0f,-0.05f,0f,0f);
        }
        else if(evt.getKeyCode() == evt.VK_E){
            // increase Blue
                graphicsPanel1.setCurrentColor(0f,0f,0.05f,0f);
        }
        else if(evt.getKeyCode() == evt.VK_D){
            // decrease Blue
                graphicsPanel1.setCurrentColor(0f,0f,-0.05f,0f);
        } 
        else if(evt.getKeyCode() == evt.VK_R){
            // lighter
                graphicsPanel1.setCurrentColor(0.05f,0.05f,0.05f,0f);
        }
        else if(evt.getKeyCode() == evt.VK_F){
            // darker
                graphicsPanel1.setCurrentColor(-0.05f,-0.05f,-0.05f,0f);
        }
       else if(evt.getKeyCode() == evt.VK_P){
            // toggle random colour on/ off
            if (graphicsPanel1.useRandom == false){
                graphicsPanel1.useRandom = true;
            } else {
                graphicsPanel1.useRandom = false;
            }
        }   
       else if(evt.getKeyCode() == evt.VK_B){
            // toggle background colour on/ off
            if (graphicsPanel1.useBackground == false){
                graphicsPanel1.useBackground = true;
                if (graphicsPanel1.backgroundColor == null){
                                    Color selectedColor = 
                        JColorChooser.showDialog(
                         this,
                         "Choose Background Color",
                         graphicsPanel1.currentColor);
                    if (selectedColor != null){
                                    graphicsPanel1.setBackgroundColor(selectedColor.getRed(),
                                                    selectedColor.getGreen(),
                                                    selectedColor.getBlue());
                                    graphicsPanel1.repaint();
                    }else{
                        graphicsPanel1.useBackground = false;
                    }
                 }else{
                    graphicsPanel1.repaint();
                }
            } else {
                graphicsPanel1.useBackground = false;
                graphicsPanel1.repaint();
            }
        }  
       
       else if(evt.getKeyCode() == evt.VK_N){
            // change background colour
                graphicsPanel1.useBackground = true;
                Color selectedColor = 
                        JColorChooser.showDialog(
                         this,
                         "Choose Background Color",
                         graphicsPanel1.backgroundColor);
                    if (selectedColor != null){
                                    graphicsPanel1.setBackgroundColor(selectedColor.getRed(),
                                                    selectedColor.getGreen(),
                                                    selectedColor.getBlue());
                                    graphicsPanel1.repaint();
                    }else{
                        graphicsPanel1.useBackground = false;
                    }
        }        
//        else if(evt.getKeyCode() == evt.VK_O){
//            // toggle random colour on/ off
//            if (graphicsPanel1.useRandom == false){
//                graphicsPanel1.useRandom = true;
//                graphicsPanel1.colorRestore = true;
//            } else {
//                graphicsPanel1.useRandom = false;
//                graphicsPanel1.colorRestore = true;
//            }
//        } 
        else if(evt.getKeyCode() == evt.VK_UP){
            // save file as vector
             for (Shape2D s : graphicsPanel1.ellipses){
                 //s.adjustPosition(0, -10);
                 s.y -= 10;
             }
             graphicsPanel1.repaint();
        }
        else if(evt.getKeyCode() == evt.VK_DOWN){
            // save file as vector
             for (Shape2D s : graphicsPanel1.ellipses){
                 //s.adjustPosition(0, 10);
                 s.y += 10;
             }
             graphicsPanel1.repaint();
        }   
        
        else if(evt.getKeyCode() == evt.VK_LEFT){
            // save file as vector
             for (Shape2D s : graphicsPanel1.ellipses){
                 // s.adjustPosition(-10, 0);
                 s.x -= 10;
             }
             graphicsPanel1.repaint();
        }
        
        else if(evt.getKeyCode() == evt.VK_RIGHT){
            // save file as vector
             for (Shape2D s : graphicsPanel1.ellipses){
                 //s.adjustPosition(10, 0);
                 s.x += 10;
             }
             graphicsPanel1.repaint();
        }
        
        else if(evt.getKeyCode() == evt.VK_K){
            // save file as vector
             saveToGraphicsFile();
        }
        
        else if(evt.getKeyCode() == evt.VK_L){
            // load file as vector
            if (graphicsPanel1.ellipses.size() > 0){
                if (JOptionPane.showConfirmDialog(null, 
                "Save current canvas first?","SAVE???", 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
                    saveToGraphicsFile();
                }
            }
            String dirName = "";
            String fileName = "";
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Vector Graphics File", "vg");
            JFileChooser c = new JFileChooser();
            c.setFileFilter(filter);
            // Demonstrate "Open" dialog:
            int rVal = c.showOpenDialog(this);
            if (rVal == JFileChooser.APPROVE_OPTION) {
              fileName = c.getSelectedFile().getName();
              if (!fileName.endsWith(".vg"))
                    fileName += ".vg";
              dirName = c.getCurrentDirectory().toString();
            }
            if (rVal == JFileChooser.CANCEL_OPTION) {
              return;
            }
            File fullName = new File(dirName, fileName);
            try{
                VectorGraphics vg = (VectorGraphics)deSerialize(fullName.getAbsolutePath());
                double scaleFactor = 1;
                graphicsPanel1.ellipses.clear();
                if (vg.height > 0)
                    scaleFactor = (double) graphicsPanel1.getHeight() / vg.height;
                for (Shape2D s : vg.ellipses){
                    s.rescale(scaleFactor);
                    graphicsPanel1.ellipses.add(s);
                }
                graphicsPanel1.repaint();
            }
            catch (FileNotFoundException fnfe){
                JOptionPane.showMessageDialog(null, "No such file","",JOptionPane.WARNING_MESSAGE);
                //fnfe.printStackTrace();
            }
            catch (IOException ioe){
                ioe.printStackTrace();
            }
            catch (ClassNotFoundException cnfe){
                cnfe.printStackTrace();
            }
        }
        
        
         else if(evt.getKeyCode() == evt.VK_F1){      
             String url = "index.html"; // the help files, e.g. index.html 
             File htmlFile = new File(url); 
             // file object of the help file 
             try 
                { Desktop.getDesktop().browse(htmlFile.toURI()); 
            // p[em the help file in a default browser 
                } catch (IOException ex) { 
                    System.out.println("IOException occurs: " + ex); }
         }
    }//GEN-LAST:event_formKeyPressed

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        if (evt.getScrollType() == MouseWheelEvent.WHEEL_UNIT_SCROLL){
            float amount = - evt.getWheelRotation() * 5f;
            this.setBounds((int)(this.getX() - amount/2), 
                    (int)(this.getY() - amount/2), 
                    (int)(this.getWidth() + amount), 
                    (int)(this.getHeight() + amount));
            this.repaint();
        }
    }//GEN-LAST:event_formMouseWheelMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Graphics2D_.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Graphics2D_.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Graphics2D_.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Graphics2D_.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Graphics2D_().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private practiceweek5.GraphicsPanel graphicsPanel1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private void serialize(File fullName, VectorGraphics vg) throws IOException {
        FileOutputStream fos = new FileOutputStream(fullName);
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(vg);
        oos.close();
        fos.close(); //To change body of generated methods, choose Tools | Templates.
    }
    
    private void saveToGraphicsFile(){
            String dirName = "";
            String fileName = "";
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Vector Graphics File", "vg");
            JFileChooser c = new JFileChooser();
            c.setFileFilter(filter);
            
      // Demonstrate "Save" dialog:
            int rVal = c.showSaveDialog(this);
            if (rVal == JFileChooser.APPROVE_OPTION) {
                fileName = c.getSelectedFile().getName();
                if (!fileName.endsWith(".vg"))
                    fileName += ".vg";
                dirName = c.getCurrentDirectory().toString();
            }
            if (rVal == JFileChooser.CANCEL_OPTION) {
                //filename.setText("You pressed cancel");
                //dir.setText("");
                return;
            }  
            
            VectorGraphics vg = new VectorGraphics(graphicsPanel1.getHeight(), 
                    graphicsPanel1.getWidth(), graphicsPanel1.ellipses);
            try{
                    File fullName = new File(dirName, fileName);
                    this.serialize(fullName,vg);
                    System.out.println("Successfully serialised drawing");
                }
            catch (IOException ioe){
                    ioe.printStackTrace();
                }
    }
    
        public static Object deSerialize(String serializedObject) throws 
            FileNotFoundException, IOException, ClassNotFoundException {
        FileInputStream fis = new FileInputStream(serializedObject);
        ObjectInputStream ois = new ObjectInputStream(fis);
        Object o = ois.readObject();
        ois.close();
        fis.close();
        return o;
    }
}
