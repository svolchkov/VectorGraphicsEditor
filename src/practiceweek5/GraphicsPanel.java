package practiceweek5;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.RenderingHints;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
/**
 *
 * @author sergeyv
 */
public class GraphicsPanel extends javax.swing.JPanel {

    /**
     * Creates new form GraphicsPanel
     */
    
    boolean drawCircle = false;
    int Xcoord = 0;
    int Ycoord = 0;
    double scaleFactor;
    int previousHeight;
    public ArrayList <Shape2D> ellipses;
    public boolean useRandom;
    public boolean colorRestore;
    public boolean useBackground;
    Color currentColor;
    Color backgroundColor;
    
    public GraphicsPanel() {
        initComponents();
        ellipses = new ArrayList <Shape2D>();
        currentColor = new Color(0.0f,0.0f,0.0f,1.0f);
        scaleFactor = 1.0;
        useRandom = false;
        colorRestore = false;
        useBackground = false;
        backgroundColor = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
 
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        drawCircle = true;
        Xcoord = evt.getX();
        Ycoord = evt.getY();
        this.repaint();
    }//GEN-LAST:event_formMousePressed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
            //drawCircle = true;
 //           this.repaint();
 //           drawCircle = false;
            //this.repaint();// TODO add your handling code here:
 //       previousHeight = this.getHeight();
    }//GEN-LAST:event_formComponentResized

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (drawCircle = true)
            Xcoord = evt.getX();
            Ycoord = evt.getY();
            this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        drawCircle = false;
    }//GEN-LAST:event_formMouseReleased
 
    @Override
    public void paintComponent(Graphics graphics){
        Graphics2D g = (Graphics2D) graphics;
          g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                  RenderingHints.VALUE_ANTIALIAS_ON);
	  g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, 
                  RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        super.paintComponent(g);
        if (previousHeight > 0) {
           scaleFactor = (double) this.getHeight() / previousHeight;
        }
        else{
            scaleFactor = 1;
        }
        if (useBackground && backgroundColor != null){
                g.setColor(backgroundColor);
                g.fillRect(0, 0, this.getWidth(), this.getHeight());
        }
        for (Shape2D s : ellipses){
                g.setColor(new Color(s.red, s.green, s.blue, s.alpha));
                s.rescale(scaleFactor);
                g.fillOval((int)s.x,(int)s.y,(int)s.width,(int)s.height);
//                float x = (float)(s.x * scaleFactor);
//                float y = (float)(s.y * scaleFactor);
//                float w = (float)(s.width * scaleFactor);
//                float h = (float)(s.height * scaleFactor);
//                g.fillOval((int)x, (int)y, (int)w,(int)h);
        }
        if (drawCircle){
            Graphics2D_ topFrame = (Graphics2D_) SwingUtilities.getWindowAncestor(this);
            int width = topFrame.brushWidth;
            int height = topFrame.brushHeight;
            int ellipseX = Xcoord - width/2;
            int ellipseY = Ycoord - height/2;
//            Ellipse2D e = new Ellipse2D.Double(Xcoord + width/2, 
//                    Ycoord + height/2, width, height); 
            int randomScaleFactor = colorRestore ? 9 : 10;
            double redShift = (Math.random() - 0.5) / randomScaleFactor;
            double greenShift = (Math.random() - 0.5) / randomScaleFactor;
            double blueShift = (Math.random() - 0.5) / randomScaleFactor;
            if (useRandom) {
                Color savedColor = new Color(currentColor.getRed(),currentColor.getGreen(),
                                    currentColor.getBlue(),currentColor.getAlpha());

                setCurrentColor((float)redShift,(float)greenShift,(float)blueShift,0f);
            }
            g.setColor(currentColor);
 
            g.fillOval(ellipseX, ellipseY, width, height);
            //Integer[] ec = new Integer[7];
            Shape2D shape = new Shape2D(ellipseX, ellipseY, width, height,
                    (float)currentColor.getRed()/255, (float)currentColor.getGreen()/255, 
                    (float)currentColor.getBlue()/255,(float)currentColor.getAlpha()/255);
            ellipses.add(shape);
            if (colorRestore) {
                setCurrentColor((float)(-redShift),(float)(-greenShift),(float)(-blueShift),0f);                
            }
//            g.setColor(Color.red);
//            drawCircle = false;

        }
        previousHeight = this.getHeight();
}

    public void undo(){
        if (ellipses.size() > 0){
            ellipses.remove(ellipses.size() - 1);
            this.repaint();
        }
    }
    
    public void setCurrentColor(int newRed, int newGreen, int newBlue, int newAlpha){
                     this.currentColor = new Color(newRed / 255f,
                                                   newGreen / 255f,
                                                   newBlue / 255f,
                                                   newAlpha / 255f);
    }
    
    public void setCurrentColor(float adjustRed, float adjustGreen, float adjustBlue, float adjustAlpha){
                    float newRed = Math.min(1.0f, Math.max(0f, currentColor.getRed()/ 255f + adjustRed));
                    float newGreen = Math.min(1.0f, Math.max(0f, currentColor.getGreen() / 255f + adjustGreen));
                    float newBlue = Math.min(1.0f, Math.max(0f, currentColor.getBlue() / 255f + adjustBlue));
                    float newAlpha = Math.min(1.0f, Math.max(0.1f, currentColor.getAlpha() / 255f + adjustAlpha));
                    this.currentColor = new Color(newRed,newGreen, newBlue, newAlpha);
    }
  
    
       public void setBackgroundColor(int newRed, int newGreen, int newBlue){
                     this.backgroundColor = new Color(newRed / 255f,
                                                   newGreen / 255f,
                                                   newBlue / 255f,
                                                   1.0f);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
